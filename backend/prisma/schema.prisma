generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  name         String
  preferences  Preferences?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Application Application[]
  Notification Notification[]
  RefreshToken RefreshToken[]
}

model Preferences {
  id                        String   @id @default(uuid())
  jobTitles                 String[]
  locations                 String[]
  salaryMin                 Int?
  salaryMax                 Int?
  emailNotifications        Boolean  @default(true)
  pushNotifications         Boolean  @default(false)
  userId                    Int      @unique
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id          String   @id @default(uuid())
  title       String
  company     String
  location    String
  salaryMin   Int?
  salaryMax   Int?
  description String
  source      String
  postedAt    DateTime
  expiresAt   DateTime?
  url         String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Application Application[]
  Notification Notification[]
}

model Log {
  id        String   @id @default(uuid())
  level     String
  message   String
  timestamp DateTime @default(now())
  userId    String?
  jobId     String?
  source    String?
}

model Application {
  id        String   @id @default(uuid())
  userId    Int
  jobId     String
  status    String
  appliedAt DateTime?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Scraper {
  id        String   @id @default(uuid())
  source    String
  status    String
  lastRunAt DateTime?
  nextRunAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  type      String
  message   String
  jobId     String?
  read      Boolean @default(false)
  sentAt    DateTime
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job? @relation(fields: [jobId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}